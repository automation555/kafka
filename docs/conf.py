# -*- coding: utf-8 -*-
#
# Apache Kafka documentation build configuration file, created by
# sphinx-quickstart on Wed Dec 17 14:17:15 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
import re
from docutils import nodes, utils
from sphinx.directives.code import CodeBlock

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.ifconfig', 'sphinxcontrib.httpdomain']

# Add custom configurations/substitutions you want here. They will be automatically registered for substitution by both
# the normal rst substitution mechanism (vis rst_prolog) and in other contexts, such as codewithvars blocks. If you add
# a name here, there should be a corresponding variable of the same name in this configuration file
custom_config_names = [
    "scala_version",
    "full_scala_version",
]


def _do_substitutions(config, content):
    def replacement(match):
        """Replace with either the substitution from config, or the original text if we don't have a substitution"""
        refname = match.group(1)
        return unicode(getattr(config, refname, match.group(0)))

    return re.sub("\|(\w+)\|", replacement, content)

class CodeWithVarsDirective(CodeBlock):
    def run(self):
        config = self.state.document.settings.env.config

        self.content = [_do_substitutions(config, content) for content in self.content]
        return super(CodeWithVarsDirective, self).run()

def literal_with_vars_role(typ, rawtext, text, lineno, inliner, options={}, content=[]):
    config = inliner.document.settings.env.app.config
    text = utils.unescape(text)

    substituted_text = _do_substitutions(config, text)
    retnode = nodes.literal(role=typ.lower(), classes=[typ])
    retnode += nodes.Text(substituted_text, substituted_text)
    return [retnode], []

def setup(app):
    def makeLink(role, rawtext, text, lineno, inliner, options={}, content=[]):
        javadocLinkBase = '/' + doc_url_version + "/javadoc/"
        tokens = text.split('|')
        # add link prefix per link macro
        if role == 'kafka-file':
            linkPrefix = 'https://github.com/apache/kafka/blob/' + version + '/'
        elif role == 'javadoc':
            # TODO can we make these relative using a similar approach as in the layout template instead of using
            # absolute paths with the version in them (which would make this work more cleanly with and without the
            # version number in the URL)
            linkPrefix = javadocLinkBase + "index.html?"
        # The following module is only used /streams/developer-guide/
        elif role == 'streams-apidocs-kstream':
            linkPrefix = javadocLinkBase + 'org/apache/kafka/streams/kstream/KStream.html'
        # The following module is only used /streams/developer-guide/
        elif role == 'streams-apidocs-ktable':
            linkPrefix = javadocLinkBase + 'org/apache/kafka/streams/kstream/KTable.html'
        # The following module is only used /streams/developer-guide/
        elif role == 'streams-apidocs-kgroupedstream':
            linkPrefix = javadocLinkBase + 'org/apache/kafka/streams/kstream/KGroupedStream.html'
        # The following module is only used /streams/developer-guide/
        elif role == 'streams-apidocs-kgroupedtable':
            linkPrefix = javadocLinkBase + 'org/apache/kafka/streams/kstream/KGroupedTable.html'
        # The following module is only used /streams/developer-guide/
        elif role == 'streams-apidocs-streamsbuilder':
            linkPrefix = javadocLinkBase + 'org/apache/kafka/streams/StreamsBuilder.html'
        # The following module is only used /streams/developer-guide/
        elif role == 'streams-apidocs-store-inmem':
            linkPrefix = javadocLinkBase + 'org/apache/kafka/streams/state/Stores.InMemoryKeyValueFactory.html'
        # The following module is only used /streams/developer-guide/
        elif role == 'streams-apidocs-store-persistent':
            linkPrefix = javadocLinkBase + 'org/apache/kafka/streams/state/Stores.PersistentKeyValueFactory.html'
        # The following module is only used /streams/developer-guide/
        elif role == 'streams-apidocs-timewindowedkstream':
            linkPrefix = javadocLinkBase + 'org/apache/kafka/streams/kstream/TimeWindowedKStream.html'
        # The following module is only used /streams/developer-guide/
        elif role == 'streams-apidocs-sessionwindowedkstream':
            linkPrefix = javadocLinkBase + 'org/apache/kafka/streams/kstream/SessionWindowedKStream.html'
        linktext = tokens[0]
        if len(tokens) == 2:
            ref = linkPrefix + tokens[1]
        else:
            ref = linkPrefix + tokens[0]
            linktext = ref
        node = nodes.reference(rawtext, utils.unescape(linktext), refuri=ref, **options)
        return [node], []

    # add link macros
    app.add_role('kafka-file', makeLink)
    app.add_role('javadoc', makeLink)
    app.add_role('streams-apidocs-kstream', makeLink)
    app.add_role('streams-apidocs-ktable', makeLink)
    app.add_role('streams-apidocs-kgroupedstream', makeLink)
    app.add_role('streams-apidocs-kgroupedtable', makeLink)
    app.add_role('streams-apidocs-kstreambuilder', makeLink)
    app.add_role('streams-apidocs-sessionwindowedkstream', makeLink)
    app.add_role('streams-apidocs-streamsbuilder', makeLink)
    app.add_role('streams-apidocs-store-inmem', makeLink)
    app.add_role('streams-apidocs-store-persistent', makeLink)
    app.add_role('streams-apidocs-timewindowedkstream', makeLink)

    def downloadLink(role, rawtext, text, lineno, inliner, options={}, content=[]):
        uri = 'https://www.apache.org/dyn/closer.cgi?path=/kafka/' + release + '/kafka_' + scala_version + '-' + release + '.tgz'
        node = nodes.reference(rawtext, utils.unescape(text), refuri=uri, **options)
        return [node], []

    app.add_role('kafka-download', downloadLink)
    app.add_role('litwithvars', literal_with_vars_role)

    app.add_directive('codewithvars', CodeWithVarsDirective)

    for config_name in custom_config_names:
        app.add_config_value(config_name, '<set ' + config_name + '>', '')

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Apache Kafka'
copyright = u'2018, Apache Software Foundation'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The full version, including alpha/beta/rc tags.
release = None
full_scala_version = None
with open(os.path.join(os.path.dirname(os.path.dirname(__file__)), 'gradle.properties')) as fp:
    for line in fp:
        if line.startswith('version'):
            release = line.strip().split('=', 1)[1].strip()
            # Including SNAPSHOT doesn't really help to keep in docs
            if release.endswith('-SNAPSHOT'):
                release = release.rsplit('-', 1)[0]
        elif line.startswith('scalaVersion'):
            full_scala_version = line.strip().split('=', 1)[1].strip()
if release is None:
    raise RuntimeError("Couldn't find release version in gradle.properties")
if full_scala_version is None:
    raise RuntimeError("Couldn't find scala version in gradle.properties")
# The short X.Y version.
version = release.rsplit('.', 1)[0]
# Shortened, dot-less versions used in docs URLs
doc_url_version = ''.join(version.split('.'))
# Short X.Y scala version
scala_version = full_scala_version.rsplit('.', 1)[0]

rst_prolog = '\n'.join([
    ".. |" + config_name + "| replace:: " + globals()[config_name] for config_name in custom_config_names
    ])

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False

# -- Options for HTML output ----------------------------------------------

import sphinx_rtd_theme

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}
html_theme_options = {
    'canonical_url': "http://kafka.apache.org/documentation/",
    'navigation_depth': 2,
    'prev_next_buttons_location': None,
}

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = False

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
# htmlhelp_basename = ''

# TODO style permalinks
html_add_permalinks = None

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'apachekafka.tex', u'Apache Kafka Documentation',
   u'Apache Software Foundation', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True



# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', u'Apache Kafka Documentation',
   u'Apache Software Foundation', 'Apache Kafka', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False
